// <auto-generated />
using System;
using CricketStatsGraphQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CricketStatsGraphQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CricketStatsGraphQL.Models.BattingInn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BallsFaced")
                        .HasColumnType("int");

                    b.Property<int?>("BowlerPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DismissalId")
                        .HasColumnType("int");

                    b.Property<int?>("FielderPlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("FirstInns")
                        .HasColumnType("bit");

                    b.Property<int>("Fours")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.Property<int>("Sixes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BowlerPlayerId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DismissalId");

                    b.HasIndex("FielderPlayerId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BattingInns");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.BowlingInn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("Extras")
                        .HasColumnType("int");

                    b.Property<bool>("FirstInns")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("Maidens")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Overs")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.Property<int>("Wickets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BowlingInns");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountryDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Dismissal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DismissalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("DismissalDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("Id");

                    b.ToTable("Dismissals");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwayCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryAwayId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryHomeId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryTossWonId")
                        .HasColumnType("int");

                    b.Property<int>("HomeCountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<short>("MatchNumber")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("MatchStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MatchTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TossWinnerCountryId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryAwayId");

                    b.HasIndex("CountryHomeId");

                    b.HasIndex("CountryTossWonId");

                    b.HasIndex("MatchTypeId");

                    b.HasIndex("VenueId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.MatchType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("MatchTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MatchTypes");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlayerSurname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Retired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("VenueCity")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VenueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.BattingInn", b =>
                {
                    b.HasOne("CricketStatsGraphQL.Models.Player", "PlayerBowler")
                        .WithMany("BowlerInns")
                        .HasForeignKey("BowlerPlayerId");

                    b.HasOne("CricketStatsGraphQL.Models.Country", "Country")
                        .WithMany("BattingInns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CricketStatsGraphQL.Models.Dismissal", "Dismissal")
                        .WithMany("BattingInns")
                        .HasForeignKey("DismissalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CricketStatsGraphQL.Models.Player", "PlayerFielder")
                        .WithMany("FielderInns")
                        .HasForeignKey("FielderPlayerId");

                    b.HasOne("CricketStatsGraphQL.Models.Match", "Match")
                        .WithMany("BattingInns")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CricketStatsGraphQL.Models.Player", "Player")
                        .WithMany("BattingInns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Dismissal");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerBowler");

                    b.Navigation("PlayerFielder");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.BowlingInn", b =>
                {
                    b.HasOne("CricketStatsGraphQL.Models.Country", "Country")
                        .WithMany("BowlingInns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CricketStatsGraphQL.Models.Match", "Match")
                        .WithMany("BowlingInns")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CricketStatsGraphQL.Models.Player", "Player")
                        .WithMany("BowlingInns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Match", b =>
                {
                    b.HasOne("CricketStatsGraphQL.Models.Country", "CountryAway")
                        .WithMany("MatchesAwayCountries")
                        .HasForeignKey("CountryAwayId");

                    b.HasOne("CricketStatsGraphQL.Models.Country", "CountryHome")
                        .WithMany("MatchesHomeCountries")
                        .HasForeignKey("CountryHomeId");

                    b.HasOne("CricketStatsGraphQL.Models.Country", "CountryTossWon")
                        .WithMany("MatchesTossCountries")
                        .HasForeignKey("CountryTossWonId");

                    b.HasOne("CricketStatsGraphQL.Models.MatchType", "MatchType")
                        .WithMany("Matches")
                        .HasForeignKey("MatchTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CricketStatsGraphQL.Models.Venue", "Venue")
                        .WithMany("Matches")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CountryAway");

                    b.Navigation("CountryHome");

                    b.Navigation("CountryTossWon");

                    b.Navigation("MatchType");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Player", b =>
                {
                    b.HasOne("CricketStatsGraphQL.Models.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Venue", b =>
                {
                    b.HasOne("CricketStatsGraphQL.Models.Country", "Country")
                        .WithMany("Venues")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Country", b =>
                {
                    b.Navigation("BattingInns");

                    b.Navigation("BowlingInns");

                    b.Navigation("MatchesAwayCountries");

                    b.Navigation("MatchesHomeCountries");

                    b.Navigation("MatchesTossCountries");

                    b.Navigation("Players");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Dismissal", b =>
                {
                    b.Navigation("BattingInns");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Match", b =>
                {
                    b.Navigation("BattingInns");

                    b.Navigation("BowlingInns");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.MatchType", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Player", b =>
                {
                    b.Navigation("BattingInns");

                    b.Navigation("BowlerInns");

                    b.Navigation("BowlingInns");

                    b.Navigation("FielderInns");
                });

            modelBuilder.Entity("CricketStatsGraphQL.Models.Venue", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
